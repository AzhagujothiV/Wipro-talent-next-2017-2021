import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'smallestString' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY substrings as parameter.
     */

    public static String smallestString(List<String> substrings) {
    // Write your code here
    String arr[]=new String[substrings.size()];
    for(int i=0;i<substrings.size();i++)
    {
        arr[i]=substrings.get(i);
    }
    // String arr1[]=
    Arrays.sort(arr);
    String st="";
    for(int i=0;i<arr.length;i++)
    {
      st=st+arr[i];
    }
    return st;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int substringsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> substrings = IntStream.range(0, substringsCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        String result = Result.smallestString(substrings);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
