import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'minimalOperations' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts STRING_ARRAY words as parameter.
     */

    public static List<Integer> minimalOperations(List<String> words) {
    // Write your code here
    int count=0;
    List<Integer>numb=new ArrayList<Integer>();
    String arr[]=new String[words.size()];
    String ar1[]=new String[words.size()];
     for(int i=0;i<words.size();i++)
     {
         arr[i]=words.toArray();
         ar1[i]=arr[i];
         if(ar1[i].equalsIgnoreCase(arr[i]))
         {
              ar[i]=arr[i];
              count++;
         }
         else
         {
             count++;
         }
         for(int j=0;j<arr.length;j++)
         {
         numb[j]=count;
         }
         return numb;
     }
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int wordsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> words = new ArrayList<>();

        for (int i = 0; i < wordsCount; i++) {
            String wordsItem = bufferedReader.readLine();
            words.add(wordsItem);
        }

        List<Integer> result = Result.minimalOperations(words);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
