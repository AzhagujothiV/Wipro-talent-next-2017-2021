import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'longestVowelSubsequence' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int longestVowelSubsequence(String s) {
    // Write your code here
    char s1[]={'a','e','i','o','u'};
    char a='a';
    int j;
    int c=1;int d=1;
    for(int i=0;i<s.length();i++)
    {
        if(s.charAt(i)==a)
        {
            for(j=i;j<=s.length();j++)
            {
                if(s.charAt(j)==a)
                {
                    c=c+1;
                }
                else{
                    if(s.charAt(j)<a)
                    continue;
                }
            }
            if(j!=s.length()-1)
            {
                if(a<s.charAt(j+1))
                {
                    a=s1[d++];
                }
            }
        }
        ls.add(c);
        c=1;
        d=0;
        a=s1[d];
        int m=ls.get(ls.size()-1);
        return m;
    }
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        int result = Result.longestVowelSubsequence(s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
