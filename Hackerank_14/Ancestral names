import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'sortRoman' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts STRING_ARRAY names as parameter.
     */

    public static List<String> sortRoman(List<String> names) {
    // Write your code here
    String namearr[]=new String[names.size()];
    for(int i=0;i<names.size();i++)
    {
        namearr[i]=names.get(i);
    }
    String[] name1Split=name1.split(" ");
    String[] name2Split=name2.split(" ");

    if(name1Split[0].compareTo(name2Split[0])==0)
    {
        int roman1=convertRomanToInt(name1Split[1]);
        int roman2=convertRomanToInt(name2Split[1]);

        return (roman1==roman2?0:(roman1>roman2?1:-1));
    }
    else{
        return name1Split[0].compareTo(name2Split[0]);
    }

    char[] arr=roman.toCharArray();

    int total=0;
    int maxnum=0;
    for(int i=arr.length-1;i>=0;i--)
    {
        int val=intForRoman.get(arr[i]);
        if(val>=maxnum)
        {
            maxnum=val;
            total+=val;
        }
        else{
            total+=val;
        }
    }
    return total;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int namesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> names = new ArrayList<>();

        for (int i = 0; i < namesCount; i++) {
            String namesItem = bufferedReader.readLine();
            names.add(namesItem);
        }

        List<String> result = Result.sortRoman(names);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(result.get(i));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
