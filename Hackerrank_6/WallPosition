import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'maxHeight' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY wallPositions
     *  2. INTEGER_ARRAY wallHeights
     */

    public static int maxHeight(List<Integer> wallPositions, List<Integer> wallHeights) {
    // Write your code here
     int n=wallPositions.size();
     int m=wallHeights.size();
     int[] a=new int[wallPositions.size()];
     int[] b=new int[wallHeights.size()];
     for(int i=0;i<wallPositions.size();i++)
     {
         a[i]=wallPositions.get(i);
     } 
     for(int i=0;i<wallHeights.size();i++)
     {
         b[i]=wallHeights.get(i);
     }
     int max=0;
     for(int i=0;i<n-1;i++)
     {
         if(a[i]<a[i+1]-1)
         {
             int heightDiff=Math.abs(b[i+1]-b[i]);
             int gaplen=a[i+1]-a[i]-1;
         int localmax=0;
         if(gaplen>heightDiff)
         {
             int low=Math.max(b[i+1], b[i])-1;
             int remainingGap=gaplen-heightDiff-1;
             localmax=low+remainingGap/2;
         }
         else
         {
             localmax=Math.min(b[i+1], b[i]-1)+gaplen;
         }
         max=Math.max(max,loaclmax);
     }
     }
     return max;
    }

}
public class Solution {
