import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {

    /*
     * Complete the 'kSub' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY nums
     */

    public static long kSub(int k, List<Integer> nums) {
    // Write your code here
     int arr[]=new int[k];
     int mod[]=new int[k];
     Collections.sort(nums);
     for(int j=0;j<nums.size();j++)
     {
         arr[i]=nums.get(i);
     }

     int cum=0;
     for(int i=0;i<n;i++)
     {
         cum+=arr[i];
         mod[((cum%k) +k) %k]++;
     }
     int result=0;
     for(int m=0;m<k;m++)
     {
         if(mod[m]>1)
         {
             result+=(mod[i]*(mod[i]-1))/2;
         }
     }
     result+=mod[0];
     return result;
    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        int numsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> nums = new ArrayList<>();

        for (int i = 0; i < numsCount; i++) {
            int numsItem = Integer.parseInt(bufferedReader.readLine().trim());
            nums.add(numsItem);
        }

        long result = Result.kSub(k, nums);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
