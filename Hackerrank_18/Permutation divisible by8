import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {

    /*
     * Complete the 'checkDivisibility' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts STRING_ARRAY arr as parameter.
     */

    public static List<String> checkDivisibility(List<String> arr) {
    // Write your code here
     List<String>lit =new ArrayList<String>();
     String k[]=new String[arr.size()];

     
     int count=0;
     for (int i=0;i<arr.size();i++)
     {
       while(true)
       {
           int rem=arr.get(i);
           while(rem>0)
           {
               count++;
               int N=N/10;
           }
           int n=N;
           int nem=rem%10;
           int div=rem/10;
           rem=(int)((Math.pow(10, n-1))* nem+div);
         
           if(rem==arr.get(i))
           {
               break;
           }
       }


     if(rem %8 ==0)
     {
         lit.add("YES");
     }
     else
     {
         lit.add("NO");
     }
     }
     return lit;
    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> arr = new ArrayList<>();

        for (int i = 0; i < arrCount; i++) {
            String arrItem = bufferedReader.readLine();
            arr.add(arrItem);
        }

        List<String> result = Result.checkDivisibility(arr);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(result.get(i));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
